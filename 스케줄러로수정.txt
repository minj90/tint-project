build.gradle => implementation 'org.springframework.boot:spring-boot-starter-websocket'
State.java =>  WAITING
WebSocketConfig.java => 추가
ProcessRepository => 상태값으로 찾기 추가
ProcessService => 수정, for문수정함(이중for문을 지우고 일단 1step만 저장)
ProcessScheduler => 추가
TintApplication.java => @EnableScheduling  스케줄링 사용을 위한 애노테이션 추가

스케쥴러가 작동을 하나 
이 에러는 WebSocket으로 메시지를 전송할 때 Jackson이 PinkProcess 내부의 JobOrder를 직렬화하려고 시도하면서 발생합니다. 그런데 JobOrder는 @ManyToOne(fetch = LAZY)로 선언되어 있고, 해당 객체의 프록시(employee)를 초기화할 수 있는 세션이 이미 닫혀 있어서 다음 예외가 발생합니다:

PinkProcessDto를 만들어서 전달함

PinkProcessDto => 추가
ProcessScheduler => PinkProcessDto로 전달하는 로직추가

jobOrderList.html에서 IN_PROGRESS상태에서 버튼 숨기기

주문건에 대하여 작업이 완료되면 상태값 바꿔주기
ProcessScheduler => 추가

시각화를 위한 작업
HomeController, 현재 작업중인 JobOrderId가 필요.
현재 상태값을 가져오기 위해 jobOrderRepository에 추가

jobOrderRepository => 추가
List<JobOrder> findByJobOrderState(JobOrderState state);

HomeController => 추가

JobOrderState.IN_PROGRESS가 없을 경우 최근주문을 가져온다.
jobOrderRepository => 추가

스케줄러에서 에러가 발생
ProcessScheduler의 @Scheduled 메서드는 트랜잭션 범위 밖에서 실행되며,
PinkProcess.getJobOrder()는 LAZY로 되어 있어서 실제 DB 조회가 지연 로딩됩니다.

PinkProcess  => EAGER로 수정
 @ManyToOne(fetch = FetchType.EAGER)
 @JoinColumn(name="jobOrder_id")
 private JobOrder jobOrder;

오늘의 제품완성수  ProcessRepository => 쿼리문추가

....................... 여기까지 수정완료함.. 스케줄러와 html문서 수정함

주문할당량이 있고 
날짜별로 전체주문수 조회

ProcessRepository => 추가
 //날짜를 기준으로
    @Query("SELECT p From PinkProcess p where DATE(p.processDate) = :date ORDER BY p.step, p.lotNumber")
    List<PinkProcess> findAllByProcessDate(@Param("date") LocalDate date);

ProcessService => 추가
  //날짜를 기준으로 주문조회
    public List<PinkProcess> findAllByDate(LocalDate date){
        return processRepository.findAllByProcessDate(date);
    }

ProcessDataService => 날짜기준 추가 및 로직분리

HomeController => 날짜별 완제품수 계산해서 넘기기